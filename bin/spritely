#!/usr/bin/env node

const path = require('path')
const fs = require('fs-extra')
const { program } = require('commander')
const cheerio = require('cheerio')
const klaw =  require('klaw')

const pkg = require('../package.json')

program
  .name(`spritely ${pkg.version}`)
  .version(pkg.version)
  .option('-i, --input [input]', 'specify input directory (default: current directory)')
  .option('-o, --output [output]', 'specify output file (default: "sprites.svg")')
  .option('-r, --recursive [recursive]', 'enable recursive traversal of input directory (default: false)')
  .option('-v, --viewbox [viewbox]', 'specify viewBox attribute (detected automatically, if not specified)')
  .option('-p, --prefix [prefix]', 'specify prefix for id attribute for symbols (default: none)')
  .option('-a, --a11y [a11y]', 'toggle accessibility mode (default: false)')
  .option('-q, --quiet', 'disable verbose output')
  .parse(process.argv)

const options = program.opts()

const SOURCE_FOLDER = options.input || '.'
const OUTPUT_FILE = options.output || 'sprites.svg'
const RECURSIVE = options.recursive || false
const ID_PREFIX = options.prefix || ''
const VIEWBOX = options.viewbox || null
const A11Y = options.a11y || false
const QUIET = options.quiet || false

const log = message => {
  if (!QUIET) console.log(message)
}

const getSvgElement = content => {
  const $ = cheerio.load(content, {
    normalizeWhitespace: true,
    xmlMode: true
  })
  return $('svg').first()
}

const getViewbox = content => {
  const svgContent = getSvgElement(content)
  return VIEWBOX || svgContent.attr('viewbox') || svgContent.attr('viewBox')
}

const getPreserveAspectRatio = content => {
  const svgContent = getSvgElement(content)
  return svgContent.attr('preserveaspectratio') || svgContent.attr('preserveAspectRatio')
}

const generateSymbolId = fileName => (ID_PREFIX + fileName).replace(' ', '-')

const generateAttributesString = attributes => {
  return Object.keys(attributes).reduce((acc, key) => {
    const value = attributes[key]
    return value ? `${acc} ${key}="${value}"` : acc
  }, '')
}

const capitalize = ([first, ...rest]) => [first.toUpperCase(), ...rest].join('')

const getSvgTitle = fileName => A11Y ? `<title>${capitalize(fileName)}</title>` : ''

const getSvgContent = (fileName, content) => getSvgTitle(fileName) + getSvgElement(content).html()

const generateSymbol = (fileName, content, attributes) => `<symbol${generateAttributesString(attributes)}>${getSvgContent(fileName, content)}</symbol>`

const wrapFile = (fileName, content) => {
  const attributes = {
    viewBox: getViewbox(content),
    id: generateSymbolId(fileName),
    preserveAspectRatio: getPreserveAspectRatio(content)
  }

  log(`Process "${fileName}" (viewBox "${attributes.viewBox}")...`)

  return generateSymbol(fileName, content, attributes)
}

const processFile = file => {
  const filePath = path.resolve(SOURCE_FOLDER, file)
  const fileName = path.basename(file, path.extname(file))
  const wrapContent = wrapFile.bind(null, fileName)

  return fs.readFile(filePath, 'utf8').then(wrapContent)
}

const removeOutputFile = () => fs.remove(OUTPUT_FILE)

const readSourceDirectory = d => {
  return !RECURSIVE 
    ? fs.readdir(SOURCE_FOLDER) 
    : new Promise((resolve, reject) => {
      const files = []

      klaw(SOURCE_FOLDER)
        .on('data', ({ path, stats }) => { if (stats.isFile()) files.push(path) })
        .on('end', () => resolve(files))
        .on('error', (err, item) => reject(err, item))
    })
}

const processFiles = files => {
  const processedFiles = files.filter(filterSvgFile).map(processFile)

  return Promise.all(processedFiles)
}

const filterSvgFile = file => path.extname(file) === '.svg'

const getSpriteContent = contents => `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true">${contents.join('')}</svg>`

const writeOutputFile = content => fs.outputFile(OUTPUT_FILE, content, 'utf8')

const conclude = () => log(`File "${OUTPUT_FILE}" successfully generated.`)

const rethrowErrors = err => {
  throw err
}

removeOutputFile()
  .then(readSourceDirectory)
  .then(processFiles)
  .then(getSpriteContent)
  .then(writeOutputFile)
  .then(conclude)
  .catch(rethrowErrors)
